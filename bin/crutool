#!/usr/bin/env python
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# Portions Copyright (C) Philipp Kewisch, 2013

import re
import sys
import getpass
import smtplib
import tempfile
import subprocess
import shutil
import os

from crutool.displayer import JSONDisplayer
from crutool.exceptions import *
from crutool.utils import *
from crutool.config import config

from crutool.cru import CRUApi
from crutool.jira import JIRAApi
from crutool.stash import StashApi

try:
  import git
  gitSupport = True
except:
  gitSupport = False

try:
  import keyring
except:
  import crutool.fakekeyring as keyring 

if config.get("defaults", "debug", False):
  import httplib2
  httplib2.debuglevel = 9

CRU_REST="/rest-service"
JIRA_REST="/rest/api/latest"
STASH_REST="/rest/api/latest"

class CRUTool(object):

  # crucible commands

  def cru_review(self, args):
    """Usage: crutool review <issue_or_cr> <set|show|add> <args>
       Usage: crutool review create <args>"""
    if len(args) < 1:
      raise UsageException(self.cru_review, "Missing issue/review id")

    cr = args[0]
    issue = None
    if cr == "create":
      return self.cru_review_create(args[1:])
    elif isPlaceholder(cr):
      issue = translatePlaceholder(cr)
      if issue is None:
        raise UsageException(self.cru_review, "Could not figure out what %s expands to" % args[0])

      cr = self.cru.reviewForIssue(issue)
      if cr is None:
        raise UsageException(self.cru_review, "No open reviews for %s" % issue)
      print "Using %s for issue %s" % (cr, issue)
    elif ISSUE_RE.match(cr) and cr[:2] != "CR":
      # TODO possibly CR is configurable...
      issue = cr
      cr = self.cru.reviewForIssue(cr)
      if cr is None:
        raise UsageException(self.cru_review, "No open reviews for %s" % issue)
      print "Using %s for issue %s" % (cr, issue)
      config.set("cache", "lastissue", issue)
    elif cr[:2] != "CR":
      raise UsageException(self.cru_review, "Unknown review %s" % cr)

    func = {
      'show': self.cru_review_show,
      'set': self.cru_review_set,
      'add': self.cru_add_changeset,
    }.get(args[1] if len(args) > 1 else "", self.cru_review_show)

    func(cr, args[2:], issue=issue)

  def cru_add_changeset(self, cr, args, issue=None):
    """Add specific changesets
         crutool review <issue_or_cr> add <repo> <changeset> [changeset2...]

       In a directory with a git repository:
         crutool review <issue_or_cr> add <target>"""

    csets = args
    if gitSupport and len(args) == 1:
      root = gitroot(os.getcwd())
      repo = os.path.basename(root)
      gitrepo = git.Repo(root)
      target = args[0]

      if target in gitrepo.heads:
        print "has head",gitrepo.heads[target].commit
        # There is a such head, its not a changeset. Compare to it
        csets = []
        for cherry in gitrepo.git.cherry(target).split("\n"):
          addremove, cset = cherry.split(" ")
          if addremove == "+":
            csets.append(cset)
      else:
        raise UsageException(self.cru_add_changeset, "Invalid target repository")

    else:
      if len(args) < 1:
        raise UsageException(self.cru_add_changeset, "Missing repository or target")
      elif len(args) < 2:
        raise UsageException(self.cru_add_changeset, "Missing changesets")

      repo = args[0]
      csets = args[1:]

    print "Adding %d changesets to %s" % (len(csets), cr)

    res = self.cru.addChangeset(cr, repo, csets)
    if "name" in res:
      print "Success"
    else:
      print "An Error occurred",res


  def cru_review_create(self, args):
    """User supplies all parameters:
         crutool review create <project> <issue> <repo> <cset> [cset2...]

       In a directory with a git repository:
         crutool review create <project> <target>

       Additionally, with the default project set in the config
         crutool review create <target>"""

    arglen = len(args)

    # One or two arguments: use git to fill in the details
    if arglen == 0 or arglen == 3:
      # There is no other call 0 or 3 arguments, everything else is ok
      raise UsageException(self.cru_review_create, "Missing arguments")
    if arglen < 3:
      if not gitSupport: raise UsageException(self.cru_review_create, "Please install GitPython")
      root = gitroot(os.getcwd())
      if not root: raise UsageException(self.cru_review_create, "No git repository found")
      repo = os.path.basename(root)
      gitrepo = git.Repo(root)

      if arglen == 1:
        project = config.require("defaults", "project")
        target = args[0]
      elif arglen == 2:
        project, target = args[:2]
        
      csets = []
      for cherry in gitrepo.git.cherry(target).split("\n"):
        addremove, cset = cherry.split(" ")
        if addremove == "+":
          csets.append(cset)

      if len(csets) == 0:
        raise UsageException(self.cru_review_create,
                             "No changes against %s" % target)
      cset0 = csets[0]
      name = gitrepo.commit(cset0).message
      issue = ISSUE_RE.search(name)
      if issue is None: raise UsageException(self.cru_review_create, "Commit message does not contain issue id (%s)" % csets[0].message)
      issue = issue.group(0)
    
      if len(csets) < 5:
        csetmsg = "changesets: %s" % ", ".join(csets)
      else:
        csetmsg = "%d changesets" % len(csets)

      print "Creating %s review for %s in %s with %s" % (project, issue, repo, csetmsg)
    else:
      # User provides all details
      project = args[0]
      issue = args[1]
      repo = args[2]
      csets = args[3:]

      issueInfo = self.jira.issueInfo(issue)
      name = "%s - %s" % (issue, issueInfo["fields"]["summary"])

    # Make sure at least one of the changesets has been scanned to avoid draft reviews
    cset = self.cru.commitInfo(repo, csets[0])
    if cset is None:
      print "Changeset %s has not been processed by fisheye, please try again later" % (csets[0])
    else:
      # Finally, create the review
      review = self.cru.createReview(project, issue, repo, name, csets)

      if review and "permaId" in review and "id" in review["permaId"]:
        cr = review["permaId"]["id"]
        htmlLink = "%s/cru/%s" % (config.require("defaults", "cru_base"), cr)
        print "Created review for %s at %s" % (issue, htmlLink)

        # Set the last issue to this issue for further processing
        config.set("cache", "lastissue", issue.encode('utf-8'))

        # If the user wants us to transition the issue, do it now
        self.cru_review_transition_hook(cr, "create", issue)
      else:
        print "An error occurred:",review

  def cru_review_transition_hook(self, cr, action, issue=None):
    transition = config.get("review", "%s_jira_transition" % action, None)
    if transition:
      try:
        # If we have no issue we need to try to get it from the review
        if issue is None:
          review = self.cru.reviewInfo(cr)
          issueMatch = ISSUE_RE.search(review["name"])
          if issueMatch:
            issue = issueMatch.group(0)
          else:
            raise UsageException(self.cru_review_transition_hook,
                  "Could not deduce issue from review information")

        # Now set the issue status
        print "Review has been set to '%s', setting %s status to '%s'" % (action, issue, transition)
        self.jira_set(issue, [transition])
      except UsageException as e:
        # Either jira_set or the try block itself may throw a UsageException.
        # Since the important part of this command is to close the review, just
        # show a warning message
        print "Warning: %s, not updating JIRA issue" % e.message

  def cru_review_show(self, cr, args, issue=None):
    """Usage: crutool review <issue_or_cr> show"""
    review = self.cru.reviewInfo(cr, True)
    htmlLink =  "%s/cru/%s" % (config.require("defaults", "cru_base"), cr)
    JSONDisplayer.cruReview(review, htmlLink)

  def cru_review_set(self, cr, args, issue=None):
    """Usage: crutool review <issue_or_cr> set <status>""" 
    transitions = map(lambda x: x["displayName"].lower(),
                      self.cru.getTransitions(cr)["transitionData"])

    # Ask for transition if the argument is missing
    if len(args) < 1:
      opts,prompt = textOptions({ v: v for v in transitions })
      ch = raw_input(prompt + " ? ")
      action = opts[ch.lower()]
    else:
      action = args[0]

    if action in transitions:
      self.cru.setReviewStatus(cr, action)
    elif action == "close" and "summarize" in transitions:
      # First set to summarize, execute the transition hook
      self.cru.setReviewStatus(cr, "summarize")
      self.cru_review_transition_hook(cr, "summarize", issue)

      # Now close normally
      self.cru.setReviewStatus(cr, action)
    else:
      raise UsageException(self.cru_review_set,
                           "Invalid transition (expected: %s)" % \
                             (",".join(transitions)))
    print "Status %s set successfully" % action

    # If configured, transition the matching issue
    self.cru_review_transition_hook(cr, action, issue)
  
  def pullrequest(self, args):
    """Usage: crutool pr <targetbranch> [branch]
       If <branch> is not specified, the issue name will be used.
       If git support is available and you are in your repository,
       the branch and changesets will be taken from the repository """
    if len(args) < 1: raise UsageException(self.pullrequest, "Missing target")

    repo = None
    revisions = []
    target = args[0]
    if not gitSupport:
      raise UsageException(self.pullrequest, "git support is required")

    root = gitroot(os.getcwd())
    gitrepo = git.Repo(root)
    repo = os.path.basename(root)
    branch = gitrepo.active_branch if len(args) < 2 else args[1]

    rev0 = None
    for cherry in gitrepo.git.cherry(target).split("\n"):
      addremove, cset = cherry.split(" ")
      if addremove == "+":
        if rev0 is None:
          rev0 = cset

        message = gitrepo.commit(cset).message.split("\n", 1)[0].strip()
        revisions.append("%s - %s" % (cset, message))

    if len(revisions) == 0:
      raise UsageException(self.pullrequest,
                           "No changes against %s" % target)
    issueMatch = ISSUE_RE.search(gitrepo.commit(rev0).message)
    if not issueMatch:
      raise UsageException(self.pullrequest,
                      "Could not deduce issue from review. " +
                      "Use issue id in your commit message")

    issue = issueMatch.group(0)
    cr = self.cru.reviewForIssue(issue)
    if cr is not None:
      review = self.cru.reviewInfo(cr, True)
      if review["state"] != "Closed":
        raise UsageException(self.pullrequest,
          "Review is '%s' but should be Closed" % review["state"])

    data = {
      'from': config.require("smtp", "from"),
      'to': config.require("smtp", "recipients"),
      'issue': issue,
      'repo': repo,
      'branch': issue if len(args) < 2 else args[1],
      'revisions': "\n".join(revisions),
      'target': target,
      'JIRA_BASE': config.require("defaults", "jira_base")
    }
    msg = JSONDisplayer.pullRequest(data)
    EDITOR = os.environ.get('EDITOR','vim')

    msgdir = tempfile.mkdtemp()
    msgfile = os.path.join(msgdir,"pull request message")
    try:
      with open(msgfile, "w") as fp:
        fp.write(msg)
      subprocess.call([EDITOR, fp.name])
      with open(msgfile, "r") as fp:
        msg = fp.read()
    finally:
      shutil.rmtree(msgdir)

    if len(msg.strip()):
      host = config.require("smtp", "host")
      if config.get("smtp", "ssl") == "True":
        smtp = smtplib.SMTP_SSL(host)
      else:
        smtp = smtplib.SMTP(host)

      user = config.require("smtp", "username")
      password = keyring.get_password('crutool-smtp', user)
      if password is None:
        password = getpass.getpass("SMTP Password [%s]:" % user)
        keyring.set_password('crutool-smtp', user, password)

      smtp.login(user, password)
      smtp.sendmail(config.require("smtp", "from"),
                    config.require("smtp", "recipients"), msg)
      smtp.quit()
      print "Success"
    else:
      print "Canceled"


  # jira commands
  def jira_main(self, args):
    """Usage: crutool jira <issue> <show|transitions|set> <args>
       Usage: crutool jira todo"""
    if len(args) < 1: raise UsageException(self.jira_main)

    issue = args[0]
    if issue == "create":
      return self.jira_create(args[1:])
    elif issue == "todo":
      return self.jira_todo(args[1:])
    elif isPlaceholder(issue):
      issue = translatePlaceholder(issue)
      if issue is None:
        raise UsageException(self.jira_main, "Could not figure out what %s expands to" % args[0])

    config.set("cache", "lastissue", issue)

    func = {
      'show': self.jira_show,
      'transitions': self.jira_transitions,
      'set': self.jira_set,
    }.get(args[1] if len(args) > 1 else "", self.jira_show)

    return func(issue, args[2:])

  def jira_todo(self, args):
    """Usage: crutool jira todo"""
    JSONDisplayer.jiraDashboard(self.jira.dashboard())

  def jira_create(self, args):
    # Put this here for the future, and in case someone assumes it exists
    print "Sorry, the version this tool is designed for (Jira 4.x) is " + \
          "not capable of creating issues via API"

  def jira_transitions(self, issue, args):
    """Usage: crutool jira <issue> transitions"""
    JSONDisplayer.jiraTransitions(self.jira.getTransitions(issue))

  def jira_set(self, issue, args):
    """Usage: crutool jira <issue> set [name]"""
    transitions = self.jira.getTransitions(issue)
    transInfo = None
    if len(args) == 0:
      opts,prompt = textOptions({
        v["name"]: v for v in transitions["transitions"]
      })
      ch = raw_input(prompt + " ? ")
      transInfo = opts[ch.lower()]
    elif len(args) == 1:
      for v in transitions["transitions"]:
        if v["name"] == args[0]:
          transInfo = v
          break
      if transInfo is None:
        raise UsageException(self.jira_set, "Transition '%s' not found" %
                                       (args[0] if len(args) else ""))
    else:
        raise UsageException(self.jira_set)

    fields = None
    if len(transInfo["fields"]):
      fields = {}
      for name,field in transInfo["fields"].iteritems():
        fieldStrings = ''
        opts = {}

        if 'allowedValues' in field:
          opts,prompt = textOptions({
            v["name"]: v['name'] for v in field['allowedValues']
          })
          fieldStrings = ' (%s)' % prompt

        req = "required" if field["required"] else "optional"
        val = raw_input("[%s] %s%s: " % (req, name, fieldStrings))
        if field["required"] or len(val):
          if val.lower() in opts:
            val = opts[val.lower()]

          if field['schema']['type'] == 'array':
            fieldvals = re.split(r"[,\s]+", val)
            fields[name] = map(lambda x: { 'name': x }, fieldvals)
          else:
            fields[name] = { 'name': val }

    self.jira.transitionIssue(issue, int(transInfo["id"]), fields=fields)

  def jira_show(self, issue, args):
    info = self.jira.issueInfo(issue)
    htmlLink =  "%s/browse/%s" % (config.get("defaults", "jira_base"), issue)
    JSONDisplayer.issue(info, htmlLink)

  # stash commands

  def stash_main(self, args):
    """Usage: crutool stash <repos|pr> <args>"""
    func = {
      'repos': self.stash_repos,
      'projects': self.stash_projects,
      'pr': self.stash_pr,
    }.get(args[0] if len(args) > 0 else "", None)

    if func is None:
      raise UsageException(self.stash_main)

    return func(args[1:])

  def stash_projects(self, args):
    projects = self.stash.projects()
    JSONDisplayer.stashProjects(projects, config.require("defaults", "stash_base"))

  def stash_repos(self, args):
    """Usage: crutool stash repos <project>"""

    if gitSupport and len(args) < 1:
      project,_,_,_ = getRepoProps()
    elif len(args) > 0:
      project = untangleProject(args[0])
    else:
      raise UsageException(self.stash_repos)

    repos = self.stash.repos(project)
    JSONDisplayer.stashRepos(repos)

  def stash_pr(self, args):
    """Usage: crutool stash pr <show|create> <args>"""
    if len(args) < 1: raise UsageException(self.stash_pr)

    func = {
      'show': self.stash_pr_show,
      'create': self.stash_pr_create,
    }.get(args[0], None)

    if func is None:
      raise UsageException(self.stash_pr, "Unknown command %s" % args[0])

    return func(args[1:])

  def stash_pr_show(self, args):
    """Usage: crutool stash pr show <project> <repo>
       Usage: crutool stash pr show <project>
       Usage: crutool stash pr show"""
    project = None
    repo = None
    if gitSupport and len(args) <= 1:
      root = gitroot(os.getcwd())
      gitrepo = git.Repo(root)
      thisproject,thisrepo,_,thisurl = getRepoProps()

      if len(args) == 0:
        repo = thisrepo
        project = thisproject
      else:
        repo = thisrepo
        project = untangleProject(args[0])
    elif len(args) == 2:
      project = untangleProject(args[0])
      repo = args[1]

    if not project or not repo:
      raise UsageException(self.stash_pr_show,
        "Missing project or repo, please configure your git repository")

    prs = self.stash.pullrequests(project, repo)
    JSONDisplayer.stashPullrequests(prs, config.require("defaults", "stash_base"))

  def stash_pr_create(self, args):
    """Usage: crutool stash pr create <target-branch>"""
    if len(args) < 1: raise UsageException(self.stash_pr_create)

    root = gitroot(os.getcwd())
    gitrepo = git.Repo(root)
    target = args[0]

    targetproject,targetrepo,targetref,targeturl = getRepoProps(target)
    thisproject,thisrepo,thisref,thisurl = getRepoProps()

    csets = []
    for cherry in gitrepo.git.cherry(target).split("\n"):
      addremove, cset = cherry.split(" ")
      if addremove == "+":
        csets.append(cset)

    message = gitrepo.commit(csets[0]).message
    issue = ISSUE_RE.search(message)
    if issue is None: raise UsageException(self.cru_review_create, "Commit message does not contain issue id (%s)" % csets[0].message)
    issue = issue.group(0)

    messages = map(lambda x: gitrepo.commit(x).message.strip(), csets)

    if len(csets) < 5:
      csetmsg = "\n".join(map(lambda x: " - ".join(x), zip(csets, messages)))
      csetmsg = "changesets:\n" + csetmsg
    else:
      csetmsg = "%d changesets" % len(csets)

    print "Creating pull request for %s using %s/%s -> %s/%s with %s" % (issue, thisproject, gitrepo.active_branch, targetproject, target, csetmsg)

    description = "\n".join(map(lambda x: gitrepo.commit(x).message.strip(), csets))

    self.stash.createPullrequest(
      title=message,
      description=description,
      fromId=thisref,
      fromRepo=thisrepo,
      fromProject=thisproject,
      toId=targetref,
      toRepo=targetrepo,
      toProject=targetproject
    )


  # auth commands
  
  def auth_clear(self, args):
    cru_user = os.getenv("CRU_USER") or getpass.getuser()
    if cru_user:
      try:
        keyring.delete_password('crutool', cru_user)
      except keyring.errors.PasswordDeleteError:
        pass

    jira_user = os.getenv("JIRA_USER") or getpass.getuser()
    if jira_user:
      try:
        keyring.delete_password('crutool', jira_user)
      except keyring.errors.PasswordDeleteError:
        pass

    smtp_user = config.get("smtp", "username", None)
    if smtp_user:
      try:
        keyring.delete_password('crutool-smtp', smtp_user)
      except keyring.errors.PasswordDeleteError:
        pass

    print "Authentication cleared"

  # api methods
  def api_call(self, args):
    """Usage: crutool api <jira|cru|stash> <http_method> <url> [header=value...]"""
    if len(args) < 3: raise UsageException(self.api_call, "Missing arguments")
    api, method, uri = args[:3]
    params = {}

    for arg in args[3:]:
      if "=" in arg:
        k,v = arg.split("=", 1)
        params[k] = v

    api = getattr(self, api)
    method = getattr(api, method)

    print json_pp(method(uri, params=params))

  # last issue
  def lastissue(self, args):
    print config.get("cache", "lastissue", "")

  # main method

  def main(self, args):
    """Usage: crutool <jira|review|stash|pr|authclear|api|_> <args>"""

    def defaultAction(args):
      raise UsageException(self.main)

    def setupAuthentication():
      cru_user = os.getenv("CRU_USER") or config.get('defaults', 'cru_user', getpass.getuser())
      cru_password = keyring.get_password('crutool', cru_user)
      jira_user = os.getenv("JIRA_USER") or config.get('defaults', 'jira_user', getpass.getuser())
      jira_password = keyring.get_password('crutool', jira_user)

      if jira_password is None:
        jira_password = getpass.getpass("JIRA Password [%s]:" % jira_user)
        keyring.set_password('crutool', jira_user, jira_password)
      if cru_password is None:
        cru_password = getpass.getpass("Crucible Password [%s]:" % cru_user)
        keyring.set_password('crutool', cru_user, cru_password)

      cruBase = config.require("defaults", "cru_base")
      jiraBase = config.require("defaults", "jira_base")
      stashBase = config.require("defaults", "stash_base")
      self.cru = CRUApi(cruBase + CRU_REST, cru_user, cru_password)
      self.jira = JIRAApi(jiraBase + JIRA_REST, jira_user, jira_password)
      self.stash = StashApi(stashBase + STASH_REST, jira_user, jira_password)

    action = args[1] if len(args) > 1 else ""

    try:
      # First try the passwordless functions
      func = {
        'authclear': self.auth_clear,
        '_': self.lastissue,
      }.get(action, None)

      # If we need a password, set up authentication and select the right action
      if func is None:
        setupAuthentication()
        func = {
          'review': self.cru_review,
          'jira': self.jira_main,
          'stash': self.stash_main,
          'pr': self.pullrequest,
          'api': self.api_call,
        }.get(action, defaultAction)

      # Now call it with the remaining arguments
      func(args[2:])
    except LoginFailedException as e:
      self.auth_clear([])
      if e.reason == "AUTHENTICATION_DENIED":
        print "Login failed too many times. Please log in once via " + \
              "the web interface and try again"
      else:
        print "Login Failed (%s)" % e.reason
        self.main(args)
    except UsageException as e:
      print e
    except KeyboardInterrupt:
      pass

    # Save the config file in case something changed
    config.saveUserFile()

if __name__ == '__main__':
  CRUTool().main(sys.argv)
